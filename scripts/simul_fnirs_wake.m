

sPipeline = struct( 'extraction_windows', [30, 380], ...
                    'simulation_windows', [0, 340], ...
                   'filter_type', 'FIR', ...
                   'filter_band', [0.005, 1.5], ...
                   'name', 'preproc');

SubjectName                 = 'sub-02';
tutorial_dir                = '/Users/edelaire1/Documents/Project/wMEM-fnirs/data/nirstorm_tutorial_2024';
sFile                      = { 'sub-02/@rawsub-02_ses-01_task-wake_mod-nirs_run-01_sync/data_0raw_sub-02_ses-01_task-wake_mod-nirs_run-01_sync.mat'};
FluenceDir  = fullfile(tutorial_dir, 'derivatives','Fluences', SubjectName);


% Start a new report
bst_report('Start');

% ===== CREATE PROTOCOL =====
ProtocolName = 'wMEM-nirs';
iProtocol = bst_get('Protocol', ProtocolName);
if isempty(iProtocol)
    % Create new protocol
    gui_brainstorm('CreateProtocol', ProtocolName, 0, 0);
else
    % Load protocol
    gui_brainstorm('SetCurrentProtocol', iProtocol);
end


%% Part 1. Data import

% Process: Extract time
sFile = bst_process('CallProcess', 'process_extract_time', sFile, [], ...
    'timewindow', sPipeline.extraction_windows);

% Process: Add time offset
sFile = bst_process('CallProcess', 'process_timeoffset', sFile, [], ...
    'info',      [], ...
    'offset',    -sPipeline.extraction_windows(1), ...
    'overwrite', 0);


% Process: Detect bad channels
sFile = bst_process('CallProcess', 'process_nst_detect_bad', sFile, [], ...
    'option_sci',                   0, ...
    'sci_threshold',                80, ...
    'power_threshold',              10, ...
    'option_coefficient_variation', 1, ...
    'coefficient_variation',        10, ...
    'option_remove_saturating',     0, ...
    'option_max_sat_prop',          10, ...
    'option_min_sat_prop',          10, ...
    'option_separation_filtering',  0, ...
    'option_separation',            [0, 5], ...
    'auxilary_signal',              3, ...  % Remove all
    'option_keep_unpaired',         0);


% tag additional channels as bad
tree_set_channelflag(sFile.FileName, 'AddBad', 'S1D7');


sRaw = sFile;



%% Part 2. Preprocessing


sRawdOD = bst_process('CallProcess', 'process_nst_dOD', sRaw, [], ...
    'option_baseline_method', 1, ...  % mean
    'timewindow',             []);

% Process: Motion Corrected (TDDR)
sPreproc_tmp = bst_process('CallProcess', 'process_nst_motion_correction', sRawdOD, [], ...
    'method',            'tddr', ...  %  Temporal Derivative Distribution Repair
    'option_event_name', 'motion', ...
    'option_smoothing',  0.99);

sPreproc_tmp = bst_process('CallProcess', 'process_bandpass', sPreproc_tmp, [], ...
        'sensortypes', 'NIRS', ...
        'highpass',    sPipeline.filter_band(1), ...
        'lowpass',     sPipeline.filter_band(2), ...
        'tranband',    0.005, ...
        'attenuation', 'relax', ...     % 40dB (relaxed)
        'ver',         '2019', ...      % 2019
        'mirror',      0, ...
        'overwrite',   0);
    
sPreproc_tmp = bst_process('CallProcess', 'process_nst_remove_ssc', sPreproc_tmp, [], ...
    'SS_chan',                 'distance', ...  % Based on Names
    'SS_chan_name',            '', ...
    'separation_threshold_cm', 1.5);

% Remove short-channel
tree_set_channelflag(sPreproc_tmp.FileName, 'AddBad', {'D19', 'D20'});


sPreproc_tmp = bst_process('CallProcess', 'process_import_data_time', sPreproc_tmp, [], ...
'subjectname',   SubjectName, ...
'condition',     sprintf('%s_task-rest_run-01_pipeline-%s',SubjectName,sPipeline.name), ...
'timewindow',    sPipeline.simulation_windows, ...
'split',         0, ...
'ignoreshort',   0, ...
'usectfcomp',    0, ...
'usessp',        0, ...
'freq',          [], ...
'baseline',      [], ...
'blsensortypes', 'NIRS');

sPreproc_tmp = bst_process('CallProcess', 'process_timeoffset', sPreproc_tmp, [], ...
    'info',      [], ...
    'offset',    -sPipeline.simulation_windows(1), ...
    'overwrite', 1);

sPreproc = sPreproc_tmp;



%% Estimate forward model and prepare simulation 

bst_process('CallProcess', 'process_nst_import_head_model', sPreproc, [], ...
    'data_source',               FluenceDir, ...
    'use_closest_wl',            0, ...
    'method',                    'geodesic_dist', ...  %  Geodesic (recommended)
    'smoothing_fwhm',            10, ...
    'use_all_pairs',             0, ...
    'normalize_fluence',         1, ...
    'force_median_spread',       0, ...
    'sensitivity_threshold_pct', 0);


% Process: Extract sensitivity surfaces from head model
sMaps = bst_process('CallProcess', 'process_nst_extract_sensitivity_from_head_model', sPreproc, [], ...
                                     'method',            'db_global', ...  % Linear
                                     'export_overlap',    1, ...
                                     'export_FOV',        1, ...
                                     'thresh_dis2cortex', 5);


disp([10 'BST> tutorial_nirstorm: Done.' 10]);